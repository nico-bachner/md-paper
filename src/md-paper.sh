#!/bin/ksh

PROGRAM_NAME="md-paper"
ROOT_CONTAINER="/usr/local"
ROOT_DIRECTORY="${ROOT_CONTAINER}/${PROGRAM_NAME}"

function error {
  echo $1
  exit 1
}

function success {
  echo $1
  exit 0
}

function uninstall {
    sudo rm ${ROOT_CONTAINER}/bin/md-paper
    sudo rm -rf ${ROOT_DIRECTORY}
    if [ -e ${ROOT_DIRECTORY} ] || [ -e ${ROOT_CONTAINER}/bin/md-paper ]
    then
        error "uninstall failed"
    fi
}

if [ $1 = "uninstall" ]
then
    # uninstall everything

    uninstall
    success ""

elif [ $1 = "reinstall" ]
then
    # reinstall everything

    uninstall
    curl https://md-paper.now.sh/install | sh
    if [ -e ${ROOT_DIRECTORY} ] || [ -e ${ROOT_CONTAINER}/bin/md-paper ]
    then
        success "reinstallation successful"
    fi

elif [ $1 = "update" ]
then
    # gives option to update without reinstalling

    cd $ROOT_DIRECTORY
    sudo git fetch origin master
    sudo git reset --hard origin/master
    success ""

elif [ -e *.md ]
then
    # main functionality - convert md to pdf

    MD=$(find *.md)
    DOCUMENT=${MD%.md}
    PROJECT_DIRECTORY=$(PWD)

    function delete {
        if [ -e ${2}.${1} ]
        then
            rm ${2}.${1}
        fi
    }
    
    function loading {
        echo
        echo "$2"

        STEP_SIZE=2
        MAX_LOAD=100
        TOTAL_STEPS=$((MAX_LOAD / STEP_SIZE))

        for ((k = 0; k < $TOTAL_STEPS ; k++))
        do
            echo -n "[ "

            for ((i = 0 ; i < k; i++))
            do 
                echo -n "#"
            done

            for (( j = i ; j < $TOTAL_STEPS ; j++ ))
            do
                echo -n " "
            done

            echo -n " ] "

            STEP=$((k * STEP_SIZE))
            echo -n "${STEP} %" $'\r'

            R=$(( RANDOM % 20 ))
            DELAY=$(( R * $1 ))
            sleep ${DELAY}s
        done
    }

    # Remove old files
    delete pdf *
    delete tex *
    delete log *
    delete aux *
    delete toc *
    delete lof *
    delete lot *
    delete bbl *
    delete blg *

    if [ "$1" = "latex" ] || [ "$2" = "latex" ] || [ "$3" = "latex" ]
    then
        latex=true
    fi

    if [ "$1" = "log" ] || [ "$2" = "log" ] || [ "$3" = "log" ]
    then
        log=true
    fi

    if [ "$1" = "aux" ] || [ "$2" = "aux" ] || [ "$3" = "aux" ]
    then
        aux=true
    fi

    # convert from md to tex using pandoc
    loading 0.01 "Converting Markdown to LaTeX"
    pandoc -f markdown ${DOCUMENT}.md --template=${ROOT_DIRECTORY}/src/template.tex -t latex -o ${DOCUMENT}.tex

    # check if successful
    if [ -e *.tex ]
    then
        echo "[ ################################################## ] 100 %"
    else
        error "An error occurred while converting Markdown to LaTeX"
    fi

    # check if bibliography exists
    # if yes, process it
    if [ -e *.bib ] || [ -e *.bibtex ]
    then
        loading 0.01 "Preparing bibliography" &
        pdflatex ${DOCUMENT}.tex >pdf.log &
        wait
        if [ -e ${DOCUMENT}.pdf ]
        then
            rm ${DOCUMENT}.pdf
            echo "[ ################################################## ] 100 %"
        else
            error "bibliography build failed"
        fi

        loading 0.01 "Processing bibliography" &
        bibtex ${DOCUMENT}.aux >bib.log &
        wait
        if [ -e ${DOCUMENT}.pdf ]
        then
            rm ${DOCUMENT}.pdf
            echo "[ ################################################## ] 100 %"
        else
            error "bibliography build failed"
        fi

        if [ -e ${DOCUMENT}.bbl ]
        then
            if [ "$aux" = true ]
            then
                echo " - ${DOCUMENT}.bbl"
            else
                rm ${DOCUMENT}.bbl
            fi
        fi
        if [ -e ${DOCUMENT}.blg ]
        then
            if [ "$aux" = true ]
            then
                echo " - ${DOCUMENT}.blg"
            else
                rm ${DOCUMENT}.blg
            fi
        fi
        if [ -e bib.log ]
        then
            if [ "$aux" = true ]
            then
                echo " - bib.log"
            else
                rm bib.log
            fi
        fi
    fi

    # convert latex to pdf using pdflatex
    loading 0.01 "Preparing Conversion from LaTeX to PDF" &
    pdflatex ${DOCUMENT}.tex >pdf.log &
    wait
    if [ -e ${DOCUMENT}.pdf ]
    then
        rm ${DOCUMENT}.pdf
        echo "[ ################################################## ] 100 %"
    else
        error "PDF build failed"
    fi

    # pdflatex needs to repeat the process to account for the processing of table of contents and similar environments
    loading 0.01 "Converting LaTeX to PDF" &
    pdflatex ${DOCUMENT}.tex >pdf.log &
    wait
    if [ -e ${DOCUMENT}.pdf ]
    then
        echo "[ ################################################## ] 100 %"
    else
        error "PDF build failed"
    fi

    # Delete build files generated by pdflatex if they exist
    if [ "$latex" = true ] || [ "$log" = true ] || [ "$LOG" = true ]
    then
        echo "Kept the following files:"
    else
        success ""
    fi

    if [ -e ${DOCUMENT}.tex ]
    then
        if [ "$latex" = true ]
        then
            echo " - ${DOCUMENT}.tex"
        else
            rm ${DOCUMENT}.tex
        fi
    fi

    if [ -e ${DOCUMENT}.log ]
    then
        if [ "$log" = true ]
        then
            echo " - ${DOCUMENT}.log"
        else
            rm ${DOCUMENT}.log
        fi
    fi

    if [ -e pdf.log ]
    then
        if [ "$log" = true ]
        then
            echo " - pdf.log"
        else
            rm pdf.log
        fi
    fi

    if [ -e ${DOCUMENT}.aux ]
    then
        if [ "$aux" = true ]
        then
            echo " - ${DOCUMENT}.aux"
        else
            rm ${DOCUMENT}.aux
        fi
    fi

    if [ -e ${DOCUMENT}.out ]
    then
        if [ "$aux" = true ]
        then
            echo " - ${DOCUMENT}.out"
        else
            rm ${DOCUMENT}.out
        fi
    fi

    if [ -e ${DOCUMENT}.toc ]
    then
        if [ "$aux" = true ]
        then
            echo " - ${DOCUMENT}.toc"
        else
            rm ${DOCUMENT}.toc
        fi
    fi

    if [ -e ${DOCUMENT}.lof ]
    then
        if [ "$aux" = true ]
        then
            echo " - ${DOCUMENT}.lof"
        else
            rm ${DOCUMENT}.lof
        fi
    fi

    if [ -e ${DOCUMENT}.lot ]
    then
        if [ "$aux" = true ]
        then
            echo " - ${DOCUMENT}.lot"
        else
            rm ${DOCUMENT}.lot
        fi
    fi

    if [ -e texput.log ]
    then
        if [ "$aux" = true ]
        then
            echo " - texput.log"
        else
            rm texput.log
        fi
    fi

    success ""
else
    error "no markdown files found"
fi
