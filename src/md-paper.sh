#!/bin/ksh

PROGRAM_NAME="md-paper"
ROOT_CONTAINER="/usr/local"
ROOT_DIRECTORY="${ROOT_CONTAINER}/${PROGRAM_NAME}"

function error {
    echo $1
    exit 1
}

function success {
    echo $1
    exit 0
}

function uninstall {
    sudo rm ${ROOT_CONTAINER}/bin/md-paper
    sudo rm -rf ${ROOT_DIRECTORY}
    if [ -e ${ROOT_DIRECTORY} ] || [ -e ${ROOT_CONTAINER}/bin/md-paper ]
    then
        error "uninstall failed"
    fi
}

if [ $1 = "uninstall" ]
then
    # uninstall everything

    uninstall
    success ""

elif [ $1 = "reinstall" ]
then
    # reinstall everything

    uninstall
    curl https://md-paper.now.sh/install | sh
    if [ -e ${ROOT_DIRECTORY} ] || [ -e ${ROOT_CONTAINER}/bin/md-paper ]
    then
        success "reinstallation successful"
    fi

elif [ $1 = "update" ]
then
    # gives option to update without reinstalling

    cd $ROOT_DIRECTORY
    sudo git fetch origin master
    sudo git reset --hard origin/master
    success ""

elif [ -e *.md ]
then
    # main functionality - convert md to pdf

    MD=$(find *.md)
    DOCUMENT=${MD%.md}
    PROJECT_DIRECTORY=$(PWD)

    function delete {
        if [ -e *.${1} ]
        then
            rm *.${1}
        fi
    }
    
    function loading {
        echo "$2"

        STEP_SIZE=4
        MAX_LOAD=100
        TOTAL_STEPS=$((MAX_LOAD / STEP_SIZE))

        for ((k = 0; k < $TOTAL_STEPS ; k++))
        do
            echo -n "[ "

            for ((i = 0 ; i < k; i++))
            do 
                echo -n "#"
            done

            for (( j = i ; j < $TOTAL_STEPS ; j++ ))
            do
                echo -n " "
            done

            echo -n " ]"

            STEP=$((k * STEP_SIZE))
            echo -ne " ${STEP} %\r"

            R=$(( RANDOM % 5 ))
            DELAY=$(( R * $1 ))
            sleep ${DELAY}s

            echo -ne "\033[K"
        done
    }

    function processComplete {
        echo "[ ######################### ] 100 %"
    }

    # Remove old files
    delete pdf
    delete tex
    delete log
    delete aux
    delete toc
    delete lof
    delete lot
    delete bbl
    delete blg

    if [ "$1" = "latex" ] || [ "$2" = "latex" ] || [ "$3" = "latex" ]
    then
        latex=true
    fi

    if [ "$1" = "log" ] || [ "$2" = "log" ] || [ "$3" = "log" ]
    then
        log=true
    fi

    if [ "$1" = "aux" ] || [ "$2" = "aux" ] || [ "$3" = "aux" ]
    then
        aux=true
    fi

    # convert from md to tex using pandoc
    loading 0.1 "Converting Markdown to LaTeX"
    pandoc -f markdown ${DOCUMENT}.md --template=${ROOT_DIRECTORY}/src/template.tex -t latex -o ${DOCUMENT}.tex

    # check if successful
    if [ -e *.tex ]
    then
        processComplete
    else
        error "An error occurred while converting Markdown to LaTeX"
    fi

    # check if bibliography exists
    # if yes, process it
    if [ -e *.bib ] || [ -e *.bibtex ]
    then
        loading 0.2 "Preparing bibliography" &
        pdflatex ${DOCUMENT}.tex >pdf.log &
        wait
        if [ -e ${DOCUMENT}.pdf ]
        then
            rm ${DOCUMENT}.pdf
            processComplete
        else
            error "bibliography build failed"
        fi

        loading 0.1 "Processing bibliography" &
        bibtex ${DOCUMENT}.aux >bib.log &
        wait
        if [ -e ${DOCUMENT}.pdf ]
        then
            rm ${DOCUMENT}.pdf
            processComplete
        else
            error "bibliography build failed"
        fi

        if [ "$1" != "aux" ] && [ "$2" != "aux" ] && [ "$3" != "aux" ]
        then
            delete bbl
            delete blg
        fi
    fi

    # convert latex to pdf using pdflatex
    loading 0.2 "Preparing Conversion from LaTeX to PDF" &
    pdflatex ${DOCUMENT}.tex >pdf.log &
    wait
    if [ -e ${DOCUMENT}.pdf ]
    then
        rm ${DOCUMENT}.pdf
        processComplete
    else
        error "PDF build failed"
    fi

    # pdflatex needs to repeat the process to account for the processing of table of contents and similar environments
    loading 0.2 "Converting LaTeX to PDF" &
    pdflatex ${DOCUMENT}.tex >pdf.log &
    wait
    if [ -e ${DOCUMENT}.pdf ]
    then
        processComplete
    else
        error "PDF build failed"
    fi

    # Delete build files generated by pdflatex if they exist
    if [ "$1" != "tex" ] && [ "$2" != "tex" ] && [ "$3" != "tex" ]
    then
        delete tex
    fi
    if [ "$1" != "log" ] && [ "$2" != "log" ] && [ "$3" != "log" ]
    then
        delete log
    fi
    if [ "$1" != "aux" ] && [ "$2" != "aux" ] && [ "$3" != "aux" ]
    then
        delete aux
        delete out
        delete toc
        delete lof
        delete lot
    fi
    success ""
else
    error "no markdown files found"
fi
