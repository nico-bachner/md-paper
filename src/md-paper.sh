#!/bin/ksh

BINARY_DIRECTORY="/usr/local/bin"
MD=$(find *.md)
FILE=${MD%.md}
PROJECT_DIRECTORY=$(PWD)

function main {
    case $1 in 
        i|install)
            # shorthand command for importing external TeX modules
            if [ $2 ]
            then
                sudo tlmgr install $2
            else
                error "no package specified"
            fi
            exit $?
            ;;
        u|uninstall)
            # uninstall everything
            uninstall
            exit $?
            ;;
        r|reinstall)
            # reinstall everything
            uninstall
            curl https://md-paper.now.sh/install | sh
            exit $?
            ;;
        html)
            if [ -e *.md ]
            then
                # convert md to html
                html
                open ${FILE}.html
                exit $?
            else
                error "no markdown file found"
            fi
            ;;
        latex|tex)
            if [ -e *.md ]
            then
                # convert md to tex
                latex
                open ${FILE}.tex
                exit $?
            else
                error "no markdown file found"
            fi
            ;;
        pdf)
            if [ -e *.md ]
            then
                # convert md to pdf
                latex
                pdf
                open ${FILE}.pdf
                exit $?
            else
                error "no markdown file found"
            fi
            ;;
        *)
            error "no output format specified"
            ;;
    esac
}

function error {
    echo "error: "
    echo -n "${1}"
    exit 1
}

function uninstall {
    sudo rm ${BINARY_DIRECTORY}/md-paper
    if [ -e ${BINARY_DIRECTORY}/md-paper ]
    then
        error "uninstall failed"
    fi
}

function loading {
    echo "$2"

    STEP_SIZE=5
    MAX_LOAD=100
    TOTAL_STEPS=$((MAX_LOAD / STEP_SIZE))

    for ((k = 0; k < $TOTAL_STEPS ; k++))
    do
        echo -n "[ "

        for ((i = 0 ; i < k; i++))
        do 
            echo -n "#"
        done

        for (( j = i ; j < $TOTAL_STEPS ; j++ ))
        do
            echo -n " "
        done

        echo -n " ]"

        STEP=$((k * STEP_SIZE))
        echo -ne " ${STEP} %\r"

        R=$(( RANDOM % 4 ))
        DELAY=$(( R * $1 ))
        sleep ${DELAY}s

        echo -ne "\033[K"
    done
}

function complete {
    if [ -e *.${1} ]
    then
        echo "[ #################### ] 100 %"
        echo "${2}"
    else
        error "${3}"
    fi
}

function delete {
    if [ -e *.${1} ]
    then
        rm *.${1}
    fi
}

function html {
    # Remove old files
    delete html

    # convert from md to html using pandoc
    loading 0.05 "converting Markdown to HTML"
    pandoc -s -f markdown ${FILE}.md -t html -o ${FILE}.html

    # check if successful
    complete html "" ""
}

function latex {
    # Remove old files
    delete tex

    # convert from md to tex using pandoc
    loading 0.05 "converting Markdown to LaTeX"
    cd ~/
    mv template.tex ${PROJECT_DIRECTORY} 
    cd ${PROJECT_DIRECTORY}
    pandoc -f markdown ${FILE}.md --template=template.tex -t latex -o ${FILE}.tex
    mv template.tex ~/

    # check if successful
    complete tex "" "An error occurred while converting Markdown to LaTeX"
}

function pdf {
    # Remove old files
    delete pdf
    delete log
    delete aux
    delete toc
    delete lof
    delete lot
    delete bbl
    delete blg
    delete out

    # check if bibliography exists
    # if yes, process it
    if [ -e *.bib ] || [ -e *.bibtex ]
    then
        loading 0.1 "preparing bibliography" &
        pdflatex ${FILE}.tex >pdf.log &
        wait
        complete pdf "" "pdf build failed"
        delete pdf

        loading 0.05 "processing bibliography" &
        bibtex ${FILE}.aux >bib.log &
        wait
        # check if successful
        complete bib "" "bibliography build failed"
    fi

    # convert latex to pdf using pdflatex
    loading 0.1 "preparing conversion from LaTeX to PDF" &
    pdflatex ${FILE}.tex >pdf.log &
    wait
    complete pdf "" "PDF build failed"
    delete pdf

    # pdflatex needs to repeat the process to account for the processing of table of contents and similar environments
    loading 0.1 "converting LaTeX to PDF" &
    pdflatex ${FILE}.tex >pdf.log &
    wait
    complete pdf "" "PDF build failed"

    # Delete build files generated by pdflatex if they exist
    if [ "$2" == "--log" ] || [ "$3" == "--log" ] || [ "$4" == "--log" ]
    then
        mkdir logs
        mv *.log logs/
        "log files are in logs folder"
    else
        delete log
    fi
    if [ "$2" == "--aux" ] || [ "$3" == "--aux" ] || [ "$4" == "--aux" ]
    then
        mkdir aux
        mv *.log aux/
        "aux files are in logs folder"
    else
        delete aux
        delete out
        delete toc
        delete lof
        delete lot

        delete bbl
        delete blg
    fi
}

main "$@"; exit
